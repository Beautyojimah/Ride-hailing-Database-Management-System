-- Data analysis

-- what is the average fare per ride ?
SELECT trip_id, AVG(amount) AS average_amount
FROM payment
GROUP BY trip_id
ORDER BY AVG(amount) DESC;


-- what are the most popular locations for drop off.
 SELECT city, COUNT(t.end_address_id) AS num_of_trips
 FROM trips AS t
 INNER JOIN addresses AS a
 ON t.end_address_id = a.address_id
 GROUP BY city
 ORDER BY COUNT(city) DESC
 ;
 
 -- How much revenue is generated by each city (calculate in percentage)
SELECT city, SUM(amount) AS revenue, 
ROUND(SUM(amount)/(
					SELECT SUM(amount) 
                    FROM payment)*100,0
                    ) AS percentage
FROM addresses a
JOIN trips t
ON a.address_id = t.start_address_id
JOIN payment p
ON p.trip_id = t.trip_id
GROUP BY city
ORDER BY SUM(amount) DESC;  


-- Which routes had fares significantly higher than the average fare?
	-- identify the route
    -- identify what the average fare is for that route.
  
 SELECT trip_id, amount
 FROM payment
 WHERE amount >  
 (SELECT ROUND(AVG(amount),2)
  FROM payment)
ORDER BY amount DESC
 ;
 
 -- Find the trips that are above the average payment 
 SELECT trip_id, amount
 FROM payment
 WHERE amount > 
 (SELECT (AVG(amount))
	FROM payment)
ORDER BY amount DESC
 ;
 
 -- Which top 15 drivers have an average rating that is higher than the overall average rating of all drivers, and what are those ratings.
SELECT first_name, last_name, ROUND(AVG(rating),0) AS total_ratings  -- updated to ratings
FROM driver d
JOIN ratings r
ON d.user_id = r.rating_for_user_id
JOIN app_users ap
ON ap.user_id = d.user_id
GROUP BY driver_id
HAVING AVG(rating) > -- updated to ratings
	(SELECT ROUND(AVG(rating),0) -- updated to ratings
	FROM driver d
	JOIN ratings r
	ON d.user_id = r.rating_for_user_id)
ORDER BY total_ratings DESC
LIMIT 15;


-- "How many drivers have an average rating above the overall average, and how are these drivers distributed across different rating levels?"

SELECT Rating_group, COUNT(*) AS Number_of_drivers
FROM 
    (SELECT driver_id,ROUND(AVG(r.rating), 0) AS Rating_group
     FROM driver d
	 JOIN ratings r 
     ON d.user_id = r.rating_for_user_id
     GROUP BY driver_id
     HAVING AVG(r.rating) > (SELECT AVG(rating) FROM ratings)
    ) AS Subquery
GROUP BY Rating_group
ORDER BY Rating_group DESC;

-- number of users
SELECT user_type, 
COUNT(user_type) AS number_of_users
FROM app_users
GROUP BY user_type;

-- how many are active 
SELECT user_type, 
COUNT(is_active) AS number_of_active_users
FROM app_users
WHERE is_active = 'Yes'
GROUP BY user_type; 
